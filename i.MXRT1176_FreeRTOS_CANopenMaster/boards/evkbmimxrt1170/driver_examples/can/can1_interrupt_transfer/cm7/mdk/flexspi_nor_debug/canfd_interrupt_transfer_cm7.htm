<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [flexspi_nor_debug\canfd_interrupt_transfer_cm7.out]</title></head>
<body><HR>
<H1>Static Call Graph for image flexspi_nor_debug\canfd_interrupt_transfer_cm7.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Thu Jun 26 15:42:51 2025
<BR><P>
<H3>Maximum Stack Usage =        800 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
App_Task &rArr; canDispatch &rArr; proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[10]">Reset_Handler</a>
 <LI><a href="#[b7]">ACMP1_IRQHandler</a>
 <LI><a href="#[b8]">ACMP2_IRQHandler</a>
 <LI><a href="#[b9]">ACMP3_IRQHandler</a>
 <LI><a href="#[ba]">ACMP4_IRQHandler</a>
 <LI><a href="#[72]">ADC1_IRQHandler</a>
 <LI><a href="#[73]">ADC2_IRQHandler</a>
 <LI><a href="#[af]">ADC_ETC_ERROR_IRQ_IRQHandler</a>
 <LI><a href="#[ab]">ADC_ETC_IRQ0_IRQHandler</a>
 <LI><a href="#[ac]">ADC_ETC_IRQ1_IRQHandler</a>
 <LI><a href="#[ad]">ADC_ETC_IRQ2_IRQHandler</a>
 <LI><a href="#[ae]">ADC_ETC_IRQ3_IRQHandler</a>
 <LI><a href="#[130]">ASRC_DriverIRQHandler</a>
 <LI><a href="#[14]">BusFault_Handler</a>
 <LI><a href="#[5f]">CAAM_IRQ0_IRQHandler</a>
 <LI><a href="#[60]">CAAM_IRQ1_IRQHandler</a>
 <LI><a href="#[61]">CAAM_IRQ2_IRQHandler</a>
 <LI><a href="#[62]">CAAM_IRQ3_IRQHandler</a>
 <LI><a href="#[63]">CAAM_RECORVE_ERRPR_IRQHandler</a>
 <LI><a href="#[64]">CAAM_RTIC_IRQHandler</a>
 <LI><a href="#[121]">CAN1_ERROR_DriverIRQHandler</a>
 <LI><a href="#[123]">CAN2_ERROR_DriverIRQHandler</a>
 <LI><a href="#[125]">CAN3_ERROR_DriverIRQHandler</a>
 <LI><a href="#[128]">CDOG_DriverIRQHandler</a>
 <LI><a href="#[7d]">CM7_GPIO2_3_IRQHandler</a>
 <LI><a href="#[2d]">CORE_IRQHandler</a>
 <LI><a href="#[52]">CSI_IRQHandler</a>
 <LI><a href="#[2b]">CTI_TRIGGER_OUT0_IRQHandler</a>
 <LI><a href="#[2c]">CTI_TRIGGER_OUT1_IRQHandler</a>
 <LI><a href="#[59]">DAC_IRQHandler</a>
 <LI><a href="#[79]">DCIC1_IRQHandler</a>
 <LI><a href="#[7a]">DCIC2_IRQHandler</a>
 <LI><a href="#[f7]">DMA0_DMA16_DriverIRQHandler</a>
 <LI><a href="#[101]">DMA10_DMA26_DriverIRQHandler</a>
 <LI><a href="#[102]">DMA11_DMA27_DriverIRQHandler</a>
 <LI><a href="#[103]">DMA12_DMA28_DriverIRQHandler</a>
 <LI><a href="#[104]">DMA13_DMA29_DriverIRQHandler</a>
 <LI><a href="#[105]">DMA14_DMA30_DriverIRQHandler</a>
 <LI><a href="#[106]">DMA15_DMA31_DriverIRQHandler</a>
 <LI><a href="#[f8]">DMA1_DMA17_DriverIRQHandler</a>
 <LI><a href="#[f9]">DMA2_DMA18_DriverIRQHandler</a>
 <LI><a href="#[fa]">DMA3_DMA19_DriverIRQHandler</a>
 <LI><a href="#[fb]">DMA4_DMA20_DriverIRQHandler</a>
 <LI><a href="#[fc]">DMA5_DMA21_DriverIRQHandler</a>
 <LI><a href="#[fd]">DMA6_DMA22_DriverIRQHandler</a>
 <LI><a href="#[fe]">DMA7_DMA23_DriverIRQHandler</a>
 <LI><a href="#[ff]">DMA8_DMA24_DriverIRQHandler</a>
 <LI><a href="#[100]">DMA9_DMA25_DriverIRQHandler</a>
 <LI><a href="#[107]">DMA_ERROR_DriverIRQHandler</a>
 <LI><a href="#[17]">DebugMon_Handler</a>
 <LI><a href="#[f]">DefaultISR</a>
 <LI><a href="#[e6]">EMVSIM1_IRQHandler</a>
 <LI><a href="#[e7]">EMVSIM2_IRQHandler</a>
 <LI><a href="#[bf]">ENC1_IRQHandler</a>
 <LI><a href="#[c0]">ENC2_IRQHandler</a>
 <LI><a href="#[c1]">ENC3_IRQHandler</a>
 <LI><a href="#[c2]">ENC4_IRQHandler</a>
 <LI><a href="#[138]">ENET_1588_Timer_DriverIRQHandler</a>
 <LI><a href="#[13c]">ENET_1G_1588_Timer_DriverIRQHandler</a>
 <LI><a href="#[13b]">ENET_1G_DriverIRQHandler</a>
 <LI><a href="#[139]">ENET_1G_MAC0_Tx_Rx_1_DriverIRQHandler</a>
 <LI><a href="#[13a]">ENET_1G_MAC0_Tx_Rx_2_DriverIRQHandler</a>
 <LI><a href="#[137]">ENET_DriverIRQHandler</a>
 <LI><a href="#[145]">ENET_QOS_DriverIRQHandler</a>
 <LI><a href="#[146]">ENET_QOS_PMT_DriverIRQHandler</a>
 <LI><a href="#[8c]">EWM_IRQHandler</a>
 <LI><a href="#[131]">FLEXIO1_DriverIRQHandler</a>
 <LI><a href="#[132]">FLEXIO2_DriverIRQHandler</a>
 <LI><a href="#[7c]">FLEXRAM_ECC_IRQHandler</a>
 <LI><a href="#[4c]">FLEXRAM_IRQHandler</a>
 <LI><a href="#[133]">FLEXSPI1_DriverIRQHandler</a>
 <LI><a href="#[134]">FLEXSPI2_DriverIRQHandler</a>
 <LI><a href="#[8f]">GPC_IRQHandler</a>
 <LI><a href="#[77]">GPIO13_Combined_0_31_IRQHandler</a>
 <LI><a href="#[7e]">GPIO1_Combined_0_15_IRQHandler</a>
 <LI><a href="#[7f]">GPIO1_Combined_16_31_IRQHandler</a>
 <LI><a href="#[80]">GPIO2_Combined_0_15_IRQHandler</a>
 <LI><a href="#[81]">GPIO2_Combined_16_31_IRQHandler</a>
 <LI><a href="#[82]">GPIO3_Combined_0_15_IRQHandler</a>
 <LI><a href="#[83]">GPIO3_Combined_16_31_IRQHandler</a>
 <LI><a href="#[84]">GPIO4_Combined_0_15_IRQHandler</a>
 <LI><a href="#[85]">GPIO4_Combined_16_31_IRQHandler</a>
 <LI><a href="#[86]">GPIO5_Combined_0_15_IRQHandler</a>
 <LI><a href="#[87]">GPIO5_Combined_16_31_IRQHandler</a>
 <LI><a href="#[57]">GPIO6_Combined_0_15_IRQHandler</a>
 <LI><a href="#[58]">GPIO6_Combined_16_31_IRQHandler</a>
 <LI><a href="#[4f]">GPR_IRQ_IRQHandler</a>
 <LI><a href="#[91]">GPT1_IRQHandler</a>
 <LI><a href="#[93]">GPT3_IRQHandler</a>
 <LI><a href="#[94]">GPT4_IRQHandler</a>
 <LI><a href="#[95]">GPT5_IRQHandler</a>
 <LI><a href="#[96]">GPT6_IRQHandler</a>
 <LI><a href="#[56]">GPU2D_IRQHandler</a>
 <LI><a href="#[5a]">KEY_MANAGER_IRQHandler</a>
 <LI><a href="#[4d]">KPP_IRQHandler</a>
 <LI><a href="#[51]">LCDIFv2_IRQHandler</a>
 <LI><a href="#[114]">LPI2C1_DriverIRQHandler</a>
 <LI><a href="#[115]">LPI2C2_DriverIRQHandler</a>
 <LI><a href="#[116]">LPI2C3_DriverIRQHandler</a>
 <LI><a href="#[117]">LPI2C4_DriverIRQHandler</a>
 <LI><a href="#[118]">LPI2C5_DriverIRQHandler</a>
 <LI><a href="#[119]">LPI2C6_DriverIRQHandler</a>
 <LI><a href="#[11a]">LPSPI1_DriverIRQHandler</a>
 <LI><a href="#[11b]">LPSPI2_DriverIRQHandler</a>
 <LI><a href="#[11c]">LPSPI3_DriverIRQHandler</a>
 <LI><a href="#[11d]">LPSPI4_DriverIRQHandler</a>
 <LI><a href="#[11e]">LPSPI5_DriverIRQHandler</a>
 <LI><a href="#[11f]">LPSPI6_DriverIRQHandler</a>
 <LI><a href="#[71]">LPSR_LP0_BROWNOUT_IRQHandler</a>
 <LI><a href="#[70]">LPSR_LP8_BROWNOUT_IRQHandler</a>
 <LI><a href="#[e9]">MECC1_FATAL_INT_IRQHandler</a>
 <LI><a href="#[e8]">MECC1_INT_IRQHandler</a>
 <LI><a href="#[eb]">MECC2_FATAL_INT_IRQHandler</a>
 <LI><a href="#[ea]">MECC2_INT_IRQHandler</a>
 <LI><a href="#[126]">MIPI_CSI_DriverIRQHandler</a>
 <LI><a href="#[127]">MIPI_DSI_DriverIRQHandler</a>
 <LI><a href="#[90]">MUA_IRQHandler</a>
 <LI><a href="#[13]">MemManage_Handler</a>
 <LI><a href="#[8e]">OCOTP_READ_DONE_ERROR_IRQHandler</a>
 <LI><a href="#[8d]">OCOTP_READ_FUSE_ERROR_IRQHandler</a>
 <LI><a href="#[140]">PDM_ERROR_DriverIRQHandler</a>
 <LI><a href="#[13f]">PDM_EVENT_DriverIRQHandler</a>
 <LI><a href="#[13e]">PDM_HWVAD_ERROR_DriverIRQHandler</a>
 <LI><a href="#[13d]">PDM_HWVAD_EVENT_DriverIRQHandler</a>
 <LI><a href="#[b5]">PIT1_IRQHandler</a>
 <LI><a href="#[b6]">PIT2_IRQHandler</a>
 <LI><a href="#[97]">PWM1_0_IRQHandler</a>
 <LI><a href="#[98]">PWM1_1_IRQHandler</a>
 <LI><a href="#[99]">PWM1_2_IRQHandler</a>
 <LI><a href="#[9a]">PWM1_3_IRQHandler</a>
 <LI><a href="#[9b]">PWM1_FAULT_IRQHandler</a>
 <LI><a href="#[cb]">PWM2_0_IRQHandler</a>
 <LI><a href="#[cc]">PWM2_1_IRQHandler</a>
 <LI><a href="#[cd]">PWM2_2_IRQHandler</a>
 <LI><a href="#[ce]">PWM2_3_IRQHandler</a>
 <LI><a href="#[cf]">PWM2_FAULT_IRQHandler</a>
 <LI><a href="#[d0]">PWM3_0_IRQHandler</a>
 <LI><a href="#[d1]">PWM3_1_IRQHandler</a>
 <LI><a href="#[d2]">PWM3_2_IRQHandler</a>
 <LI><a href="#[d3]">PWM3_3_IRQHandler</a>
 <LI><a href="#[d4]">PWM3_FAULT_IRQHandler</a>
 <LI><a href="#[d5]">PWM4_0_IRQHandler</a>
 <LI><a href="#[d6]">PWM4_1_IRQHandler</a>
 <LI><a href="#[d7]">PWM4_2_IRQHandler</a>
 <LI><a href="#[d8]">PWM4_3_IRQHandler</a>
 <LI><a href="#[d9]">PWM4_FAULT_IRQHandler</a>
 <LI><a href="#[53]">PXP_IRQHandler</a>
 <LI><a href="#[76]">RDC_IRQHandler</a>
 <LI><a href="#[8b]">RTWDOG3_IRQHandler</a>
 <LI><a href="#[78]">Reserved110_IRQHandler</a>
 <LI><a href="#[b0]">Reserved166_IRQHandler</a>
 <LI><a href="#[b1]">Reserved167_IRQHandler</a>
 <LI><a href="#[b2]">Reserved168_IRQHandler</a>
 <LI><a href="#[b3]">Reserved169_IRQHandler</a>
 <LI><a href="#[b4]">Reserved170_IRQHandler</a>
 <LI><a href="#[bb]">Reserved177_IRQHandler</a>
 <LI><a href="#[bc]">Reserved178_IRQHandler</a>
 <LI><a href="#[bd]">Reserved179_IRQHandler</a>
 <LI><a href="#[be]">Reserved180_IRQHandler</a>
 <LI><a href="#[c3]">Reserved185_IRQHandler</a>
 <LI><a href="#[c4]">Reserved186_IRQHandler</a>
 <LI><a href="#[da]">Reserved208_IRQHandler</a>
 <LI><a href="#[db]">Reserved209_IRQHandler</a>
 <LI><a href="#[dc]">Reserved210_IRQHandler</a>
 <LI><a href="#[dd]">Reserved211_IRQHandler</a>
 <LI><a href="#[de]">Reserved212_IRQHandler</a>
 <LI><a href="#[df]">Reserved213_IRQHandler</a>
 <LI><a href="#[e0]">Reserved214_IRQHandler</a>
 <LI><a href="#[e1]">Reserved215_IRQHandler</a>
 <LI><a href="#[4e]">Reserved68_IRQHandler</a>
 <LI><a href="#[129]">SAI1_DriverIRQHandler</a>
 <LI><a href="#[12a]">SAI2_DriverIRQHandler</a>
 <LI><a href="#[12b]">SAI3_RX_DriverIRQHandler</a>
 <LI><a href="#[12c]">SAI3_TX_DriverIRQHandler</a>
 <LI><a href="#[12d]">SAI4_RX_DriverIRQHandler</a>
 <LI><a href="#[12e]">SAI4_TX_DriverIRQHandler</a>
 <LI><a href="#[c9]">SEMA4_CP0_IRQHandler</a>
 <LI><a href="#[ca]">SEMA4_CP1_IRQHandler</a>
 <LI><a href="#[9e]">SEMC_IRQHandler</a>
 <LI><a href="#[5c]">SNVS_HP_NON_TZ_IRQHandler</a>
 <LI><a href="#[5d]">SNVS_HP_TZ_IRQHandler</a>
 <LI><a href="#[5e]">SNVS_PULSE_EVENT_IRQHandler</a>
 <LI><a href="#[12f]">SPDIF_DriverIRQHandler</a>
 <LI><a href="#[6d]">TMPSNS_INT_IRQHandler</a>
 <LI><a href="#[6e]">TMPSNS_LOW_HIGH_IRQHandler</a>
 <LI><a href="#[6f]">TMPSNS_PANIC_IRQHandler</a>
 <LI><a href="#[c5]">TMR1_IRQHandler</a>
 <LI><a href="#[c6]">TMR2_IRQHandler</a>
 <LI><a href="#[c7]">TMR3_IRQHandler</a>
 <LI><a href="#[c8]">TMR4_IRQHandler</a>
 <LI><a href="#[74]">USBPHY1_IRQHandler</a>
 <LI><a href="#[75]">USBPHY2_IRQHandler</a>
 <LI><a href="#[a2]">USB_OTG1_IRQHandler</a>
 <LI><a href="#[a1]">USB_OTG2_IRQHandler</a>
 <LI><a href="#[135]">USDHC1_DriverIRQHandler</a>
 <LI><a href="#[136]">USDHC2_DriverIRQHandler</a>
 <LI><a href="#[15]">UsageFault_Handler</a>
 <LI><a href="#[8a]">WDOG1_IRQHandler</a>
 <LI><a href="#[5b]">WDOG2_IRQHandler</a>
 <LI><a href="#[a9]">XBAR1_IRQ_0_1_IRQHandler</a>
 <LI><a href="#[aa]">XBAR1_IRQ_2_3_IRQHandler</a>
 <LI><a href="#[142]">XECC_FLEXSPI1_FATAL_INT_DriverIRQHandler</a>
 <LI><a href="#[141]">XECC_FLEXSPI1_INT_DriverIRQHandler</a>
 <LI><a href="#[144]">XECC_FLEXSPI2_FATAL_INT_DriverIRQHandler</a>
 <LI><a href="#[143]">XECC_FLEXSPI2_INT_DriverIRQHandler</a>
 <LI><a href="#[f1]">XECC_SEMC_FATAL_INT_IRQHandler</a>
 <LI><a href="#[f0]">XECC_SEMC_INT_IRQHandler</a>
 <LI><a href="#[50]">eLCDIF_IRQHandler</a>
 <LI><a href="#[11]">NMI_Handler</a>
 <LI><a href="#[12]">HardFault_Handler</a>
 <LI><a href="#[1a]">DMA0_DMA16_IRQHandler</a>
 <LI><a href="#[1b]">DMA1_DMA17_IRQHandler</a>
 <LI><a href="#[1c]">DMA2_DMA18_IRQHandler</a>
 <LI><a href="#[1d]">DMA3_DMA19_IRQHandler</a>
 <LI><a href="#[1e]">DMA4_DMA20_IRQHandler</a>
 <LI><a href="#[1f]">DMA5_DMA21_IRQHandler</a>
 <LI><a href="#[20]">DMA6_DMA22_IRQHandler</a>
 <LI><a href="#[21]">DMA7_DMA23_IRQHandler</a>
 <LI><a href="#[22]">DMA8_DMA24_IRQHandler</a>
 <LI><a href="#[23]">DMA9_DMA25_IRQHandler</a>
 <LI><a href="#[24]">DMA10_DMA26_IRQHandler</a>
 <LI><a href="#[25]">DMA11_DMA27_IRQHandler</a>
 <LI><a href="#[26]">DMA12_DMA28_IRQHandler</a>
 <LI><a href="#[27]">DMA13_DMA29_IRQHandler</a>
 <LI><a href="#[28]">DMA14_DMA30_IRQHandler</a>
 <LI><a href="#[29]">DMA15_DMA31_IRQHandler</a>
 <LI><a href="#[2a]">DMA_ERROR_IRQHandler</a>
 <LI><a href="#[2e]">LPUART1_IRQHandler</a>
 <LI><a href="#[2f]">LPUART2_IRQHandler</a>
 <LI><a href="#[30]">LPUART3_IRQHandler</a>
 <LI><a href="#[31]">LPUART4_IRQHandler</a>
 <LI><a href="#[32]">LPUART5_IRQHandler</a>
 <LI><a href="#[33]">LPUART6_IRQHandler</a>
 <LI><a href="#[34]">LPUART7_IRQHandler</a>
 <LI><a href="#[35]">LPUART8_IRQHandler</a>
 <LI><a href="#[36]">LPUART9_IRQHandler</a>
 <LI><a href="#[37]">LPUART10_IRQHandler</a>
 <LI><a href="#[38]">LPUART11_IRQHandler</a>
 <LI><a href="#[39]">LPUART12_IRQHandler</a>
 <LI><a href="#[3a]">LPI2C1_IRQHandler</a>
 <LI><a href="#[3b]">LPI2C2_IRQHandler</a>
 <LI><a href="#[3c]">LPI2C3_IRQHandler</a>
 <LI><a href="#[3d]">LPI2C4_IRQHandler</a>
 <LI><a href="#[3e]">LPI2C5_IRQHandler</a>
 <LI><a href="#[3f]">LPI2C6_IRQHandler</a>
 <LI><a href="#[40]">LPSPI1_IRQHandler</a>
 <LI><a href="#[41]">LPSPI2_IRQHandler</a>
 <LI><a href="#[42]">LPSPI3_IRQHandler</a>
 <LI><a href="#[43]">LPSPI4_IRQHandler</a>
 <LI><a href="#[44]">LPSPI5_IRQHandler</a>
 <LI><a href="#[45]">LPSPI6_IRQHandler</a>
 <LI><a href="#[46]">CAN1_IRQHandler</a>
 <LI><a href="#[47]">CAN1_ERROR_IRQHandler</a>
 <LI><a href="#[48]">CAN2_IRQHandler</a>
 <LI><a href="#[49]">CAN2_ERROR_IRQHandler</a>
 <LI><a href="#[4a]">CAN3_IRQHandler</a>
 <LI><a href="#[4b]">CAN3_ERROR_IRQHandler</a>
 <LI><a href="#[54]">MIPI_CSI_IRQHandler</a>
 <LI><a href="#[55]">MIPI_DSI_IRQHandler</a>
 <LI><a href="#[65]">CDOG_IRQHandler</a>
 <LI><a href="#[66]">SAI1_IRQHandler</a>
 <LI><a href="#[67]">SAI2_IRQHandler</a>
 <LI><a href="#[68]">SAI3_RX_IRQHandler</a>
 <LI><a href="#[69]">SAI3_TX_IRQHandler</a>
 <LI><a href="#[6a]">SAI4_RX_IRQHandler</a>
 <LI><a href="#[6b]">SAI4_TX_IRQHandler</a>
 <LI><a href="#[6c]">SPDIF_IRQHandler</a>
 <LI><a href="#[7b]">ASRC_IRQHandler</a>
 <LI><a href="#[88]">FLEXIO1_IRQHandler</a>
 <LI><a href="#[89]">FLEXIO2_IRQHandler</a>
 <LI><a href="#[9c]">FLEXSPI1_IRQHandler</a>
 <LI><a href="#[9d]">FLEXSPI2_IRQHandler</a>
 <LI><a href="#[9f]">USDHC1_IRQHandler</a>
 <LI><a href="#[a0]">USDHC2_IRQHandler</a>
 <LI><a href="#[a3]">ENET_IRQHandler</a>
 <LI><a href="#[a4]">ENET_1588_Timer_IRQHandler</a>
 <LI><a href="#[a5]">ENET_1G_MAC0_Tx_Rx_1_IRQHandler</a>
 <LI><a href="#[a6]">ENET_1G_MAC0_Tx_Rx_2_IRQHandler</a>
 <LI><a href="#[a7]">ENET_1G_IRQHandler</a>
 <LI><a href="#[a8]">ENET_1G_1588_Timer_IRQHandler</a>
 <LI><a href="#[e2]">PDM_HWVAD_EVENT_IRQHandler</a>
 <LI><a href="#[e3]">PDM_HWVAD_ERROR_IRQHandler</a>
 <LI><a href="#[e4]">PDM_EVENT_IRQHandler</a>
 <LI><a href="#[e5]">PDM_ERROR_IRQHandler</a>
 <LI><a href="#[ec]">XECC_FLEXSPI1_INT_IRQHandler</a>
 <LI><a href="#[ed]">XECC_FLEXSPI1_FATAL_INT_IRQHandler</a>
 <LI><a href="#[ee]">XECC_FLEXSPI2_INT_IRQHandler</a>
 <LI><a href="#[ef]">XECC_FLEXSPI2_FATAL_INT_IRQHandler</a>
 <LI><a href="#[f2]">ENET_QOS_IRQHandler</a>
 <LI><a href="#[f3]">ENET_QOS_PMT_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c5]">CLOCK_GetRootClockFreq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">CLOCK_GetFreq</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b7]">ACMP1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b8]">ACMP2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b9]">ACMP3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ba]">ACMP4_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[72]">ADC1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[73]">ADC2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[af]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ab]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ac]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ad]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ae]">ADC_ETC_IRQ3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[130]">ASRC_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[7b]">ASRC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[153]">AppTaskCreate</a> from flexcan_interrupt_transfer.o(.text.AppTaskCreate) referenced 2 times from flexcan_interrupt_transfer.o(.text.main)
 <LI><a href="#[147]">App_Task</a> from flexcan_interrupt_transfer.o(.text.App_Task) referenced 2 times from flexcan_interrupt_transfer.o(.text.AppTaskCreate)
 <LI><a href="#[14]">BusFault_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[5f]">CAAM_IRQ0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[60]">CAAM_IRQ1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[61]">CAAM_IRQ2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[62]">CAAM_IRQ3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[63]">CAAM_RECORVE_ERRPR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[64]">CAAM_RTIC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[120]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN1_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[121]">CAN1_ERROR_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[47]">CAN1_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[46]">CAN1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[122]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN2_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[123]">CAN2_ERROR_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[49]">CAN2_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[48]">CAN2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[124]">CAN3_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN3_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[125]">CAN3_ERROR_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[4b]">CAN3_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[4a]">CAN3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[128]">CDOG_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[65]">CDOG_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[7d]">CM7_GPIO2_3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[2d]">CORE_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[52]">CSI_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[2b]">CTI_TRIGGER_OUT0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[2c]">CTI_TRIGGER_OUT1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[151]">ConsumerHeartbeatAlarm</a> from lifegrd.o(.text.ConsumerHeartbeatAlarm) referenced 2 times from lifegrd.o(.text.heartbeatInit)
 <LI><a href="#[151]">ConsumerHeartbeatAlarm</a> from lifegrd.o(.text.ConsumerHeartbeatAlarm) referenced 2 times from lifegrd.o(.text.proceedNODE_GUARD)
 <LI><a href="#[59]">DAC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[79]">DCIC1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[7a]">DCIC2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[f7]">DMA0_DMA16_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[1a]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[101]">DMA10_DMA26_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[24]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[102]">DMA11_DMA27_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[25]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[103]">DMA12_DMA28_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[26]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[104]">DMA13_DMA29_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[27]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[105]">DMA14_DMA30_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[28]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[106]">DMA15_DMA31_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[29]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[f8]">DMA1_DMA17_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[1b]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[f9]">DMA2_DMA18_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[1c]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[fa]">DMA3_DMA19_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[1d]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[fb]">DMA4_DMA20_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[1e]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[fc]">DMA5_DMA21_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[1f]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[fd]">DMA6_DMA22_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[20]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[fe]">DMA7_DMA23_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[21]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ff]">DMA8_DMA24_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[22]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[100]">DMA9_DMA25_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[23]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[107]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[2a]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[14b]">DbgConsole_Putchar</a> from fsl_debug_console.o(.text.DbgConsole_Putchar) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Vprintf)
 <LI><a href="#[17]">DebugMon_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[f]">DefaultISR</a> from startup_mimxrt1176_cm7.o(.text) referenced 2 times from fsl_flexcan.o(.data.s_flexcanIsr)
 <LI><a href="#[f]">DefaultISR</a> from startup_mimxrt1176_cm7.o(.text) referenced 26 times from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[f]">DefaultISR</a> from startup_mimxrt1176_cm7.o(.text) referenced 21 times from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[e6]">EMVSIM1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[e7]">EMVSIM2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[bf]">ENC1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c0]">ENC2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c1]">ENC3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c2]">ENC4_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[138]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[a4]">ENET_1588_Timer_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[13c]">ENET_1G_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[a8]">ENET_1G_1588_Timer_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[13b]">ENET_1G_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[a7]">ENET_1G_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[139]">ENET_1G_MAC0_Tx_Rx_1_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[a5]">ENET_1G_MAC0_Tx_Rx_1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[13a]">ENET_1G_MAC0_Tx_Rx_2_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[a6]">ENET_1G_MAC0_Tx_Rx_2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[137]">ENET_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[a3]">ENET_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[145]">ENET_QOS_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[f2]">ENET_QOS_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[146]">ENET_QOS_PMT_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[f3]">ENET_QOS_PMT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[8c]">EWM_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[14c]">FLEXCAN_TransferHandleIRQ</a> from fsl_flexcan.o(.text.FLEXCAN_TransferHandleIRQ) referenced 2 times from fsl_flexcan.o(.text.FLEXCAN_TransferCreateHandle)
 <LI><a href="#[131]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[88]">FLEXIO1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[132]">FLEXIO2_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[89]">FLEXIO2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[7c]">FLEXRAM_ECC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[4c]">FLEXRAM_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[133]">FLEXSPI1_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[9c]">FLEXSPI1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[134]">FLEXSPI2_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[9d]">FLEXSPI2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[8f]">GPC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[77]">GPIO13_Combined_0_31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[7e]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[7f]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[80]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[81]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[82]">GPIO3_Combined_0_15_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[83]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[84]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[85]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[86]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[87]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[57]">GPIO6_Combined_0_15_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[58]">GPIO6_Combined_16_31_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[4f]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[91]">GPT1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[92]">GPT2_IRQHandler</a> from flexcan_interrupt_transfer.o(.text.GPT2_IRQHandler) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[93]">GPT3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[94]">GPT4_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[95]">GPT5_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[96]">GPT6_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[56]">GPU2D_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[155]">GuardTimeAlarm</a> from lifegrd.o(.text.GuardTimeAlarm) referenced 2 times from lifegrd.o(.text.nodeguardInit)
 <LI><a href="#[14a]">HAL_UartReceiveBlocking</a> from fsl_adapter_lpuart.o(.text.HAL_UartReceiveBlocking) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Init)
 <LI><a href="#[149]">HAL_UartSendBlocking</a> from fsl_adapter_lpuart.o(.text.HAL_UartSendBlocking) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Init)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[5a]">KEY_MANAGER_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[4d]">KPP_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[51]">LCDIFv2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[114]">LPI2C1_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[3a]">LPI2C1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[115]">LPI2C2_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[3b]">LPI2C2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[116]">LPI2C3_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[3c]">LPI2C3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[117]">LPI2C4_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[3d]">LPI2C4_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[118]">LPI2C5_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[3e]">LPI2C5_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[119]">LPI2C6_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[3f]">LPI2C6_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11a]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[40]">LPSPI1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11b]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[41]">LPSPI2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11c]">LPSPI3_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[42]">LPSPI3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11d]">LPSPI4_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[43]">LPSPI4_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11e]">LPSPI5_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[44]">LPSPI5_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11f]">LPSPI6_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[45]">LPSPI6_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[71]">LPSR_LP0_BROWNOUT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[70]">LPSR_LP8_BROWNOUT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[111]">LPUART10_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART10_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[37]">LPUART10_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[112]">LPUART11_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART11_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[38]">LPUART11_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[113]">LPUART12_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART12_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[39]">LPUART12_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[108]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[2e]">LPUART1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[109]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[2f]">LPUART2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[10a]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[30]">LPUART3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[10b]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[31]">LPUART4_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[10c]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[32]">LPUART5_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[10d]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[33]">LPUART6_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[10e]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[34]">LPUART7_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[10f]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[35]">LPUART8_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[110]">LPUART9_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART9_DriverIRQHandler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[36]">LPUART9_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[e9]">MECC1_FATAL_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[e8]">MECC1_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[eb]">MECC2_FATAL_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ea]">MECC2_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[126]">MIPI_CSI_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[54]">MIPI_CSI_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[127]">MIPI_DSI_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[55]">MIPI_DSI_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[90]">MUA_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c]">Master_scanIndexOD</a> from master.o(.text.Master_scanIndexOD) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[1]">Master_valueRangeTest</a> from master.o(.text.Master_valueRangeTest) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[13]">MemManage_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11]">NMI_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[11]">NMI_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[8e]">OCOTP_READ_DONE_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[8d]">OCOTP_READ_FUSE_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[159]">OnCOB_ID_SyncUpdate</a> from sync.o(.text.OnCOB_ID_SyncUpdate) referenced 2 times from sync.o(.text.startSYNC)
 <LI><a href="#[150]">OnHeartbeatProducerUpdate</a> from lifegrd.o(.text.OnHeartbeatProducerUpdate) referenced 2 times from lifegrd.o(.text.heartbeatInit)
 <LI><a href="#[154]">OnNodeGuardUpdate</a> from lifegrd.o(.text.OnNodeGuardUpdate) referenced 2 times from lifegrd.o(.text.nodeguardInit)
 <LI><a href="#[14f]">OnNumberOfErrorsUpdate</a> from emcy.o(.text.OnNumberOfErrorsUpdate) referenced 2 times from emcy.o(.text.emergencyInit)
 <LI><a href="#[140]">PDM_ERROR_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[e5]">PDM_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[13f]">PDM_EVENT_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[e4]">PDM_EVENT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[13e]">PDM_HWVAD_ERROR_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[e3]">PDM_HWVAD_ERROR_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[13d]">PDM_HWVAD_EVENT_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[e2]">PDM_HWVAD_EVENT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[157]">PDOEventTimerAlarm</a> from pdo.o(.text.PDOEventTimerAlarm) referenced 2 times from pdo.o(.text.sendOnePDOevent)
 <LI><a href="#[158]">PDOInhibitTimerAlarm</a> from pdo.o(.text.PDOInhibitTimerAlarm) referenced 2 times from pdo.o(.text.sendOnePDOevent)
 <LI><a href="#[b5]">PIT1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b6]">PIT2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[97]">PWM1_0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[98]">PWM1_1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[99]">PWM1_2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[9a]">PWM1_3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[9b]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[cb]">PWM2_0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[cc]">PWM2_1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[cd]">PWM2_2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ce]">PWM2_3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[cf]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d0]">PWM3_0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d1]">PWM3_1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d2]">PWM3_2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d3]">PWM3_3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d4]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d5]">PWM4_0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d6]">PWM4_1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d7]">PWM4_2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d8]">PWM4_3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[d9]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[53]">PXP_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[18]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[18]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[14d]">ProducerHeartbeatAlarm</a> from lifegrd.o(.text.ProducerHeartbeatAlarm) referenced 2 times from lifegrd.o(.text.OnHeartbeatProducerUpdate)
 <LI><a href="#[14d]">ProducerHeartbeatAlarm</a> from lifegrd.o(.text.ProducerHeartbeatAlarm) referenced 2 times from lifegrd.o(.text.heartbeatInit)
 <LI><a href="#[76]">RDC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[8b]">RTWDOG3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[78]">Reserved110_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b0]">Reserved166_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b1]">Reserved167_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b2]">Reserved168_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b3]">Reserved169_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[b4]">Reserved170_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[bb]">Reserved177_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[bc]">Reserved178_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[bd]">Reserved179_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[be]">Reserved180_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c3]">Reserved185_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c4]">Reserved186_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[da]">Reserved208_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[db]">Reserved209_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[dc]">Reserved210_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[dd]">Reserved211_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[de]">Reserved212_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[df]">Reserved213_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[e0]">Reserved214_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[e1]">Reserved215_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[4e]">Reserved68_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[10]">Reset_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from fsl_flexspi_nor_boot.o(.boot_hdr.ivt)
 <LI><a href="#[10]">Reset_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[129]">SAI1_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[66]">SAI1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[12a]">SAI2_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[67]">SAI2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[12b]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[68]">SAI3_RX_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[12c]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[69]">SAI3_TX_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[12d]">SAI4_RX_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[6a]">SAI4_RX_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[12e]">SAI4_TX_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[6b]">SAI4_TX_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[152]">SDOTimeoutAlarm</a> from sdo.o(.text.SDOTimeoutAlarm) referenced 2 times from sdo.o(.text.initSDOline)
 <LI><a href="#[152]">SDOTimeoutAlarm</a> from sdo.o(.text.SDOTimeoutAlarm) referenced 22 times from sdo.o(.text.proceedSDO)
 <LI><a href="#[c9]">SEMA4_CP0_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[ca]">SEMA4_CP1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[9e]">SEMC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[5c]">SNVS_HP_NON_TZ_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[5d]">SNVS_HP_TZ_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[5e]">SNVS_PULSE_EVENT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[12f]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[6c]">SPDIF_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[16]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[16]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[15a]">SyncAlarm</a> from sync.o(.text.SyncAlarm) referenced 2 times from sync.o(.text.startSYNC)
 <LI><a href="#[19]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[19]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[f5]">SystemInit</a> from system_mimxrt1176_cm7.o(.text.SystemInit) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[6d]">TMPSNS_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[6e]">TMPSNS_LOW_HIGH_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[6f]">TMPSNS_PANIC_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c5]">TMR1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c6]">TMR2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c7]">TMR3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[c8]">TMR4_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[14e]">TPDO_Communication_Parameter_Callback</a> from pdo.o(.text.TPDO_Communication_Parameter_Callback) referenced 2 times from pdo.o(.text.PDOInit)
 <LI><a href="#[74]">USBPHY1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[75]">USBPHY2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[a2]">USB_OTG1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[a1]">USB_OTG2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[135]">USDHC1_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[9f]">USDHC1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[136]">USDHC2_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[a0]">USDHC2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[15]">UsageFault_Handler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[8a]">WDOG1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[5b]">WDOG2_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[a9]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[aa]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[142]">XECC_FLEXSPI1_FATAL_INT_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[ed]">XECC_FLEXSPI1_FATAL_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[141]">XECC_FLEXSPI1_INT_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[ec]">XECC_FLEXSPI1_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[144]">XECC_FLEXSPI2_FATAL_INT_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[ef]">XECC_FLEXSPI2_FATAL_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[143]">XECC_FLEXSPI2_INT_DriverIRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[ee]">XECC_FLEXSPI2_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[f1]">XECC_SEMC_FATAL_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[f0]">XECC_SEMC_INT_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[0]">_RxPDO_EventTimers_Handler</a> from pdo.o(.text._RxPDO_EventTimers_Handler) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[f6]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1176_cm7.o(.text)
 <LI><a href="#[6]">_heartbeatError</a> from lifegrd.o(.text._heartbeatError) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[2]">_initialisation</a> from states.o(.text._initialisation) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[7]">_nodeguardError</a> from lifegrd.o(.text._nodeguardError) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[4]">_operational</a> from states.o(.text._operational) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[a]">_post_SlaveBootup</a> from lifegrd.o(.text._post_SlaveBootup) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[b]">_post_SlaveStateChange</a> from lifegrd.o(.text._post_SlaveStateChange) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[9]">_post_TPDO</a> from sync.o(.text._post_TPDO) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[e]">_post_emcy</a> from emcy.o(.text._post_emcy) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[8]">_post_sync</a> from sync.o(.text._post_sync) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[3]">_preOperational</a> from states.o(.text._preOperational) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[5]">_stopped</a> from states.o(.text._stopped) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[d]">_storeODSubIndex</a> from objacces.o(.text._storeODSubIndex) referenced 2 times from master.o(.data.Master_Data)
 <LI><a href="#[50]">eLCDIF_IRQHandler</a> from startup_mimxrt1176_cm7.o(.text) referenced from startup_mimxrt1176_cm7.o(.isr_vector)
 <LI><a href="#[148]">flexcan_callback</a> from flexcan_interrupt_transfer.o(.text.flexcan_callback) referenced 2 times from flexcan_interrupt_transfer.o(.text.BSP_Init)
 <LI><a href="#[f4]">main</a> from flexcan_interrupt_transfer.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[15b]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[156]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[15c]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[f6]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[277]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[15e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[163]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[278]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[279]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[27a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[27b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[27c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
<LI> fsl_flexspi_nor_boot.o(.boot_hdr.ivt)
</UL>
<P><STRONG><a name="[b7]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b8]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b9]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ba]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[72]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[73]"></a>ADC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[af]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ab]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ac]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ad]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ae]"></a>ADC_ETC_IRQ3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[130]"></a>ASRC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[5f]"></a>CAAM_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[60]"></a>CAAM_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[61]"></a>CAAM_IRQ2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>CAAM_IRQ3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[63]"></a>CAAM_RECORVE_ERRPR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[64]"></a>CAAM_RTIC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[121]"></a>CAN1_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>CAN2_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>CAN3_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>CDOG_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>CM7_GPIO2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>CORE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>CSI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>CTI_TRIGGER_OUT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>CTI_TRIGGER_OUT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>DAC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[79]"></a>DCIC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[7a]"></a>DCIC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[f7]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> fsl_flexcan.o(.data.s_flexcanIsr)
</UL>
<P><STRONG><a name="[e6]"></a>EMVSIM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e7]"></a>EMVSIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[bf]"></a>ENC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c0]"></a>ENC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c1]"></a>ENC3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c2]"></a>ENC4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[138]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>ENET_1G_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>ENET_1G_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>ENET_1G_MAC0_Tx_Rx_1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>ENET_1G_MAC0_Tx_Rx_2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>ENET_QOS_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>ENET_QOS_PMT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>EWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[131]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>FLEXRAM_ECC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[133]"></a>FLEXSPI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>FLEXSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>GPC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[77]"></a>GPIO13_Combined_0_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[7e]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[7f]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[80]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[82]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[83]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[84]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[85]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[86]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[87]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>GPIO6_Combined_0_15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>GPIO6_Combined_16_31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[91]"></a>GPT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[93]"></a>GPT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[94]"></a>GPT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[95]"></a>GPT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[96]"></a>GPT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>GPU2D_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>KEY_MANAGER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>KPP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>LCDIFv2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[114]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>LPI2C5_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>LPI2C6_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>LPSPI5_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>LPSPI6_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>LPSR_LP0_BROWNOUT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>LPSR_LP8_BROWNOUT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e9]"></a>MECC1_FATAL_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e8]"></a>MECC1_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[eb]"></a>MECC2_FATAL_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ea]"></a>MECC2_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[126]"></a>MIPI_CSI_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>MIPI_DSI_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>MUA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[8e]"></a>OCOTP_READ_DONE_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[8d]"></a>OCOTP_READ_FUSE_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[140]"></a>PDM_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>PDM_EVENT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>PDM_HWVAD_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>PDM_HWVAD_EVENT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>PIT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b6]"></a>PIT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[97]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[98]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[99]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[9a]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[9b]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[cb]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[cc]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[cd]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ce]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[cf]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d0]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d1]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d2]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d3]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d4]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d5]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d6]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d7]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d8]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[d9]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>PXP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[76]"></a>RDC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[8b]"></a>RTWDOG3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[78]"></a>Reserved110_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b0]"></a>Reserved166_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b1]"></a>Reserved167_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b2]"></a>Reserved168_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b3]"></a>Reserved169_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[b4]"></a>Reserved170_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[bb]"></a>Reserved177_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[bc]"></a>Reserved178_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[bd]"></a>Reserved179_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[be]"></a>Reserved180_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c3]"></a>Reserved185_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c4]"></a>Reserved186_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[da]"></a>Reserved208_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[db]"></a>Reserved209_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[dc]"></a>Reserved210_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[dd]"></a>Reserved211_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[de]"></a>Reserved212_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[df]"></a>Reserved213_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e0]"></a>Reserved214_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e1]"></a>Reserved215_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[129]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>SAI4_RX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>SAI4_TX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>SEMA4_CP0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ca]"></a>SEMA4_CP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[9e]"></a>SEMC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>SNVS_HP_NON_TZ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[5d]"></a>SNVS_HP_TZ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>SNVS_PULSE_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[12f]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>TMPSNS_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[6e]"></a>TMPSNS_LOW_HIGH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[6f]"></a>TMPSNS_PANIC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c5]"></a>TMR1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c6]"></a>TMR2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c7]"></a>TMR3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[c8]"></a>TMR4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[74]"></a>USBPHY1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[75]"></a>USBPHY2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a2]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a1]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[135]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a9]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[aa]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[142]"></a>XECC_FLEXSPI1_FATAL_INT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>XECC_FLEXSPI1_INT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>XECC_FLEXSPI2_FATAL_INT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>XECC_FLEXSPI2_INT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>XECC_SEMC_FATAL_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[f0]"></a>XECC_SEMC_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>eLCDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
<LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
<LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>LPUART9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>LPUART10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>LPUART11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>LPUART12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>LPI2C5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>LPI2C6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>LPSPI5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>LPSPI6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>CAN3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>CAN3_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>MIPI_CSI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>MIPI_DSI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[65]"></a>CDOG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[67]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[68]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[69]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[6a]"></a>SAI4_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[6b]"></a>SAI4_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[6c]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[7b]"></a>ASRC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[88]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[89]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>FLEXSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[9d]"></a>FLEXSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[9f]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a0]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a3]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a4]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a5]"></a>ENET_1G_MAC0_Tx_Rx_1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a6]"></a>ENET_1G_MAC0_Tx_Rx_2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a7]"></a>ENET_1G_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[a8]"></a>ENET_1G_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e2]"></a>PDM_HWVAD_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e3]"></a>PDM_HWVAD_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e4]"></a>PDM_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[e5]"></a>PDM_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ec]"></a>XECC_FLEXSPI1_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ed]"></a>XECC_FLEXSPI1_FATAL_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ee]"></a>XECC_FLEXSPI2_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[ef]"></a>XECC_FLEXSPI2_FATAL_INT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[f2]"></a>ENET_QOS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[f3]"></a>ENET_QOS_PMT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mimxrt1176_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[160]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[27d]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>

<P><STRONG><a name="[1ab]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetDefaultConfig
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[265]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[280]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[281]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[282]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>ANATOP_AI_Access</STRONG> (Thumb, 1568 bytes, Stack size 32 bytes, fsl_anatop_ai.o(.text.ANATOP_AI_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ANATOP_AI_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>

<P><STRONG><a name="[164]"></a>ANATOP_AI_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_anatop_ai.o(.text.ANATOP_AI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ANATOP_AI_Read &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_WriteWithMaskShift
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnablePllLdo
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAvPllFreq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_OSC_Set1MHzOutputBehavior
</UL>

<P><STRONG><a name="[166]"></a>ANATOP_AI_Write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_anatop_ai.o(.text.ANATOP_AI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Access
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_WriteWithMaskShift
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnablePllLdo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnableSs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllHoldRingOff
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllConfigure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnablePllReg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllSetPower
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnableClk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllBypass
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_OSC_Set1MHzOutputBehavior
</UL>

<P><STRONG><a name="[167]"></a>ANATOP_AI_WriteWithMaskShift</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fsl_anatop_ai.o(.text.ANATOP_AI_WriteWithMaskShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ANATOP_AI_WriteWithMaskShift &rArr; ANATOP_AI_Read &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllConfigure
</UL>

<P><STRONG><a name="[17d]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 2258 bytes, Stack size 96 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_GetRootClockFreq &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll3
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitPfd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_OSC_EnableOscRc400M
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_OSC_Set1MHzOutputBehavior
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnableLpsrDigLdoBypassMode
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnableLpsrAnaLdoBypassMode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_EnableBodyBias
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_BootIntoDCM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_MQSConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetSaiMClkClockSource
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRootClock
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_OSC_EnableOsc48MDiv2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_OSC_EnableOsc48M
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_OSC_GateOscRc400M
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_SetVDD1P0BuckModeTargetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[194]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 940 bytes, Stack size 56 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BOARD_ConfigMPU &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Disable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[198]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetRootClockFreq &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[19a]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, board.o(.text.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; HAL_UartInit &rArr; HAL_UartInitCommon &rArr; LPUART_Init &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[19c]"></a>BOARD_InitPins</STRONG> (Thumb, 438 bytes, Stack size 96 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[120]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.CAN1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CAN1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.CAN2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CAN2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>CAN3_DriverIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.CAN3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CAN3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_DeinitAudioPll &rArr; ANATOP_PllEnableSs &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnableSs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnablePllReg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllSetPower
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnableClk
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AudioPllGate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AudioPllSwEnClk
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[18b]"></a>CLOCK_DeinitSysPll1</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_DeinitSysPll1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_DeinitSysPll1 &rArr; ANATOP_PllEnableSs &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_SysPll1Div5En
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_SysPll1Div2En
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_SysPll1Gate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_SysPll1SwEnClk
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnableSs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnablePllReg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllSetPower
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnableClk
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1a4]"></a>CLOCK_GetFreq</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPfdFreq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetM7Freq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1c3]"></a>CLOCK_GetPfdFreq</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CLOCK_GetPfdFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1c2]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CLOCK_GetPllFreq &rArr; CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAvPllFreq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[189]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CLOCK_InitArmPll &rArr; PMU_StaticEnablePllLdo &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnablePllLdo
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[18d]"></a>CLOCK_InitPfd</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, fsl_clock.o(.text.CLOCK_InitPfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CLOCK_InitPfd &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[18c]"></a>CLOCK_InitSysPll2</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_InitSysPll2))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CLOCK_InitSysPll2 &rArr; PMU_StaticEnablePllLdo &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnablePllLdo
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[18e]"></a>CLOCK_InitSysPll3</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_InitSysPll3))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = CLOCK_InitSysPll3 &rArr; PMU_StaticEnablePllLdo &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnablePllLdo
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[190]"></a>CLOCK_InitVideoPll</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, fsl_clock.o(.text.CLOCK_InitVideoPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = CLOCK_InitVideoPll &rArr; ANATOP_PllConfigure &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnablePllLdo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_VideoPllGate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_VideoPllSwEnClk
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllToggleHoldRingOff
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllConfigure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnablePllReg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllSetPower
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnableClk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[184]"></a>CLOCK_OSC_EnableOscRc400M</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_OSC_EnableOscRc400M))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[183]"></a>CLOCK_OSC_Set1MHzOutputBehavior</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_OSC_Set1MHzOutputBehavior))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_OSC_Set1MHzOutputBehavior &rArr; ANATOP_AI_Read &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[18a]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, fsl_clock.o(.text.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CLOCK_SetPllBypass &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllBypass
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[151]"></a>ConsumerHeartbeatAlarm</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lifegrd.o(.text.ConsumerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConsumerHeartbeatAlarm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lifegrd.o(.text.heartbeatInit)
<LI> lifegrd.o(.text.proceedNODE_GUARD)
</UL>
<P><STRONG><a name="[228]"></a>CopyBits</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, pdo.o(.text.CopyBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[17e]"></a>DCDC_BootIntoDCM</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, fsl_dcdc.o(.text.DCDC_BootIntoDCM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DCDC_BootIntoDCM
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[19b]"></a>DbgConsole_Init</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DbgConsole_Init &rArr; HAL_UartInit &rArr; HAL_UartInitCommon &rArr; LPUART_Init &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[173]"></a>DbgConsole_Printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[14b]"></a>DbgConsole_Putchar</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Vprintf)
</UL>
<P><STRONG><a name="[1d2]"></a>DbgConsole_Vprintf</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_Vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[1fe]"></a>DelAlarm</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, timer.o(.text.DelAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[1ad]"></a>FLEXCAN_CalculateImprovedTimingValues</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, fsl_flexcan.o(.text.FLEXCAN_CalculateImprovedTimingValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = FLEXCAN_CalculateImprovedTimingValues &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetSegments
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1ea]"></a>FLEXCAN_EnterFreezeMode</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, fsl_flexcan.o(.text.FLEXCAN_EnterFreezeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLEXCAN_EnterFreezeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
</UL>

<P><STRONG><a name="[1dd]"></a>FLEXCAN_ExitFreezeMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_ExitFreezeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_ExitFreezeMode &rArr; FLEXCAN_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
</UL>

<P><STRONG><a name="[1aa]"></a>FLEXCAN_GetDefaultConfig</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCAN_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1df]"></a>FLEXCAN_GetInstance</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.FLEXCAN_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCAN_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[1af]"></a>FLEXCAN_Init</STRONG> (Thumb, 940 bytes, Stack size 112 bytes, fsl_flexcan.o(.text.FLEXCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = FLEXCAN_Init &rArr; FLEXCAN_Reset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetInstance
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Reset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Enable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1e3]"></a>FLEXCAN_ReadFDRxMb</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, fsl_flexcan.o(.text.FLEXCAN_ReadFDRxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FLEXCAN_ReadFDRxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetFDMailboxOffset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1e6]"></a>FLEXCAN_ReadRxFifo</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_ReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCAN_ReadRxFifo &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1e7]"></a>FLEXCAN_ReadRxMb</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, fsl_flexcan.o(.text.FLEXCAN_ReadRxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FLEXCAN_ReadRxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1e9]"></a>FLEXCAN_SetFDTxMbConfig</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, fsl_flexcan.o(.text.FLEXCAN_SetFDTxMbConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FLEXCAN_SetFDTxMbConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetFDMailboxOffset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortSend
</UL>

<P><STRONG><a name="[1b1]"></a>FLEXCAN_SetRxMbConfig</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, fsl_flexcan.o(.text.FLEXCAN_SetRxMbConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FLEXCAN_SetRxMbConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1e2]"></a>FLEXCAN_SetTimingConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_SetTimingConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCAN_SetTimingConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ExitFreezeMode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFreezeMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[1b2]"></a>FLEXCAN_SetTxMbConfig</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_SetTxMbConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCAN_SetTxMbConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1f0]"></a>FLEXCAN_TransferAbortReceive</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FLEXCAN_TransferAbortReceive &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1ee]"></a>FLEXCAN_TransferAbortReceiveFifo</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferAbortReceiveFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FLEXCAN_TransferAbortReceiveFifo &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1f2]"></a>FLEXCAN_TransferAbortSend</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FLEXCAN_TransferAbortSend &rArr; FLEXCAN_SetTxMbConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1b0]"></a>FLEXCAN_TransferCreateHandle</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FLEXCAN_TransferCreateHandle &rArr; FLEXCAN_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetInstance
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableInterrupts
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnableInterrupts
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1ef]"></a>FLEXCAN_TransferFDAbortReceive</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferFDAbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FLEXCAN_TransferFDAbortReceive &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1f1]"></a>FLEXCAN_TransferFDAbortSend</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferFDAbortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = FLEXCAN_TransferFDAbortSend &rArr; FLEXCAN_SetFDTxMbConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetFDTxMbConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_DisableMbInterrupts
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetFDMailboxOffset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[14c]"></a>FLEXCAN_TransferHandleIRQ</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FLEXCAN_TransferHandleIRQ &rArr; FLEXCAN_SubHandlerForDataTransfered &rArr; FLEXCAN_TransferFDAbortSend &rArr; FLEXCAN_SetFDTxMbConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CheckUnhandleInterruptEvents
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetStatusFlags
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearStatusFlags
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_flexcan.o(.text.FLEXCAN_TransferCreateHandle)
</UL>
<P><STRONG><a name="[179]"></a>FLEXCAN_TransferReceiveNonBlocking</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferReceiveNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FLEXCAN_TransferReceiveNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnableMbInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[176]"></a>FLEXCAN_TransferSendNonBlocking</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, fsl_flexcan.o(.text.FLEXCAN_TransferSendNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnableMbInterrupts
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[1f6]"></a>FLEXCAN_WriteTxMb</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, fsl_flexcan.o(.text.FLEXCAN_WriteTxMb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsMbOccupied
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
</UL>

<P><STRONG><a name="[92]"></a>GPT2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flexcan_interrupt_transfer.o(.text.GPT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPT2_IRQHandler &rArr; TimeDispatch &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a1]"></a>GPT_GetDefaultConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_gpt.o(.text.GPT_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GPT_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1a2]"></a>GPT_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, fsl_gpt.o(.text.GPT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GPT_Init &rArr; GPT_SetClockDivider &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockSource
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SoftwareReset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[220]"></a>GetSDOClientFromNodeId</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, sdo.o(.text.GetSDOClientFromNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetSDOClientFromNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[155]"></a>GuardTimeAlarm</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lifegrd.o(.text.GuardTimeAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GuardTimeAlarm &rArr; masterSendNMTnodeguard &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text.nodeguardInit)
</UL>
<P><STRONG><a name="[1d1]"></a>HAL_UartInit</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, fsl_adapter_lpuart.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_UartInit &rArr; HAL_UartInitCommon &rArr; LPUART_Init &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[14a]"></a>HAL_UartReceiveBlocking</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, fsl_adapter_lpuart.o(.text.HAL_UartReceiveBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HAL_UartReceiveBlocking &rArr; LPUART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Init)
</UL>
<P><STRONG><a name="[149]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fsl_adapter_lpuart.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_UartSendBlocking &rArr; LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Init)
</UL>
<P><STRONG><a name="[111]"></a>LPUART10_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART10_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART10_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>LPUART11_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART11_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART11_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>LPUART12_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART12_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART12_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>LPUART9_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART9_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART9_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[205]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fsl_lpuart.o(.text.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART_ClearStatusFlags &rArr; LPUART_GetStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
</UL>

<P><STRONG><a name="[200]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
</UL>

<P><STRONG><a name="[207]"></a>LPUART_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[206]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
</UL>

<P><STRONG><a name="[201]"></a>LPUART_Init</STRONG> (Thumb, 878 bytes, Stack size 56 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LPUART_Init &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SoftwareReset
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
</UL>

<P><STRONG><a name="[203]"></a>LPUART_ReadBlocking</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, fsl_lpuart.o(.text.LPUART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LPUART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
</UL>

<P><STRONG><a name="[204]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fsl_lpuart.o(.text.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[c]"></a>Master_scanIndexOD</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, master.o(.text.Master_scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Master_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[1]"></a>Master_valueRangeTest</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, master.o(.text.Master_valueRangeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Master_valueRangeTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[159]"></a>OnCOB_ID_SyncUpdate</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sync.o(.text.OnCOB_ID_SyncUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OnCOB_ID_SyncUpdate &rArr; startSYNC &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text.startSYNC)
</UL>
<P><STRONG><a name="[150]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lifegrd.o(.text.OnHeartbeatProducerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text.heartbeatInit)
</UL>
<P><STRONG><a name="[154]"></a>OnNodeGuardUpdate</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lifegrd.o(.text.OnNodeGuardUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OnNodeGuardUpdate &rArr; nodeguardInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text.nodeguardInit)
</UL>
<P><STRONG><a name="[14f]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, emcy.o(.text.OnNumberOfErrorsUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OnNumberOfErrorsUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emcy.o(.text.emergencyInit)
</UL>
<P><STRONG><a name="[157]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pdo.o(.text.PDOEventTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text.sendOnePDOevent)
</UL>
<P><STRONG><a name="[158]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pdo.o(.text.PDOInhibitTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PDOInhibitTimerAlarm &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text.sendOnePDOevent)
</UL>
<P><STRONG><a name="[20e]"></a>PDOInit</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, pdo.o(.text.PDOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[210]"></a>PDOStop</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, pdo.o(.text.PDOStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PDOStop &rArr; DelAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[180]"></a>PMU_EnableBodyBias</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, fsl_pmu.o(.text.PMU_EnableBodyBias))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PMU_EnableBodyBias
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[181]"></a>PMU_StaticEnableLpsrAnaLdoBypassMode</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, fsl_pmu.o(.text.PMU_StaticEnableLpsrAnaLdoBypassMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PMU_StaticEnableLpsrAnaLdoBypassMode &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[182]"></a>PMU_StaticEnableLpsrDigLdoBypassMode</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, fsl_pmu.o(.text.PMU_StaticEnableLpsrDigLdoBypassMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PMU_StaticEnableLpsrDigLdoBypassMode &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ce]"></a>PMU_StaticEnablePllLdo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_pmu.o(.text.PMU_StaticEnablePllLdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PMU_StaticEnablePllLdo &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll3
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
<LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>ProducerHeartbeatAlarm</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lifegrd.o(.text.ProducerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ProducerHeartbeatAlarm &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lifegrd.o(.text.OnHeartbeatProducerUpdate)
<LI> lifegrd.o(.text.heartbeatInit)
</UL>
<P><STRONG><a name="[230]"></a>RegisterSetODentryCallBack</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, objacces.o(.text.RegisterSetODentryCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>

<P><STRONG><a name="[16c]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fsl_common_arm.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnablePllLdo
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllToggleHoldRingOff
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllConfigure
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll3
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnableLpsrDigLdoBypassMode
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_StaticEnableLpsrAnaLdoBypassMode
</UL>

<P><STRONG><a name="[152]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, sdo.o(.text.SDOTimeoutAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SDOTimeoutAlarm &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdo.o(.text.proceedSDO)
<LI> sdo.o(.text.initSDOline)
</UL>
<P><STRONG><a name="[215]"></a>SDOlineToObjdict</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sdo.o(.text.SDOlineToObjdict))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[23a]"></a>SDOtoLine</STRONG> (Thumb, 162 bytes, Stack size 28 bytes, sdo.o(.text.SDOtoLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDOtoLine
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
<LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[20a]"></a>SetAlarm</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, timer.o(.text.SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[15a]"></a>SyncAlarm</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sync.o(.text.SyncAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SyncAlarm &rArr; sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text.startSYNC)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1176_cm7.o(.isr_vector)
<LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>SystemInit</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, system_mimxrt1176_cm7.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1176_cm7.o(.text)
</UL>
<P><STRONG><a name="[21b]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1176_cm7.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14e]"></a>TPDO_Communication_Parameter_Callback</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, pdo.o(.text.TPDO_Communication_Parameter_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = TPDO_Communication_Parameter_Callback &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text.PDOInit)
</UL>
<P><STRONG><a name="[1f8]"></a>TimeDispatch</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, timer.o(.text.TimeDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TimeDispatch &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT2_IRQHandler
</UL>

<P><STRONG><a name="[0]"></a>_RxPDO_EventTimers_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pdo.o(.text._RxPDO_EventTimers_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RxPDO_EventTimers_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[196]"></a>__aeabi_assert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPfdFreq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAvPllFreq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_DriverIRQHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DriverIRQHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DriverIRQHandler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortSend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxFifo
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadFDRxMb
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetFDTxMbConfig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTimingConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetInstance
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitPfd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRootClock
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CalculateImprovedTimingValues
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetDefaultConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRootClock
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetOutputCompareValue
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetInstance
</UL>

<P><STRONG><a name="[21c]"></a>_getODentry</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, objacces.o(.text._getODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessDictionaryError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[6]"></a>_heartbeatError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lifegrd.o(.text._heartbeatError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _heartbeatError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[2]"></a>_initialisation</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, states.o(.text._initialisation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _initialisation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[7]"></a>_nodeguardError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lifegrd.o(.text._nodeguardError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nodeguardError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[4]"></a>_operational</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, states.o(.text._operational))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _operational
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[a]"></a>_post_SlaveBootup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lifegrd.o(.text._post_SlaveBootup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _post_SlaveBootup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[b]"></a>_post_SlaveStateChange</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lifegrd.o(.text._post_SlaveStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _post_SlaveStateChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[9]"></a>_post_TPDO</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, sync.o(.text._post_TPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _post_TPDO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[e]"></a>_post_emcy</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, emcy.o(.text._post_emcy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _post_emcy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[8]"></a>_post_sync</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, sync.o(.text._post_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _post_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[3]"></a>_preOperational</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, states.o(.text._preOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _preOperational &rArr; masterSendNMTstateChange &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[21f]"></a>_readNetworkDict</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, sdo.o(.text._readNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
</UL>

<P><STRONG><a name="[20f]"></a>_sendPDOevent</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, pdo.o(.text._sendPDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[216]"></a>_setODentry</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, objacces.o(.text._setODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _setODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessDictionaryError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[5]"></a>_stopped</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, states.o(.text._stopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _stopped
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[d]"></a>_storeODSubIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, objacces.o(.text._storeODSubIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _storeODSubIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data.Master_Data)
</UL>
<P><STRONG><a name="[227]"></a>_writeNetworkDict</STRONG> (Thumb, 680 bytes, Stack size 64 bytes, sdo.o(.text._writeNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
</UL>

<P><STRONG><a name="[21d]"></a>accessDictionaryError</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, objacces.o(.text.accessDictionaryError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = accessDictionaryError
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>

<P><STRONG><a name="[225]"></a>buildPDO</STRONG> (Thumb, 330 bytes, Stack size 96 bytes, pdo.o(.text.buildPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[17a]"></a>canDispatch</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, states.o(.text.canDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = canDispatch &rArr; proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[211]"></a>canSend</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, flexcan_interrupt_transfer.o(.text.canSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>

<P><STRONG><a name="[22f]"></a>emergencyInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, emcy.o(.text.emergencyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emergencyInit &rArr; RegisterSetODentryCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[26a]"></a>emergencyStop</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, emcy.o(.text.emergencyStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = emergencyStop
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[231]"></a>failedSDO</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, sdo.o(.text.failedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[217]"></a>getElapsedTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flexcan_interrupt_transfer.o(.text.getElapsedTime))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[238]"></a>getNodeId</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, states.o(.text.getNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[178]"></a>getReadResultNetworkDict</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, sdo.o(.text.getReadResultNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = getReadResultNetworkDict &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[222]"></a>getSDOfreeLine</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, sdo.o(.text.getSDOfreeLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getSDOfreeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[221]"></a>getSDOlineOnUse</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, sdo.o(.text.getSDOlineOnUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
</UL>

<P><STRONG><a name="[23c]"></a>getSDOlineRestBytes</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, sdo.o(.text.getSDOlineRestBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getSDOlineRestBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[17c]"></a>getWriteResultNetworkDict</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, sdo.o(.text.getWriteResultNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = getWriteResultNetworkDict &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[232]"></a>heartbeatInit</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lifegrd.o(.text.heartbeatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = heartbeatInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
</UL>

<P><STRONG><a name="[233]"></a>heartbeatStop</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lifegrd.o(.text.heartbeatStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = heartbeatStop &rArr; DelAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
</UL>

<P><STRONG><a name="[223]"></a>initSDOline</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, sdo.o(.text.initSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[234]"></a>lifeGuardInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lifegrd.o(.text.lifeGuardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lifeGuardInit &rArr; nodeguardInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[235]"></a>lifeGuardStop</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lifegrd.o(.text.lifeGuardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lifeGuardStop &rArr; heartbeatStop &rArr; DelAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[23d]"></a>lineToSDO</STRONG> (Thumb, 194 bytes, Stack size 28 bytes, sdo.o(.text.lineToSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[f4]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, flexcan_interrupt_transfer.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = main &rArr; BSP_Init &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1fd]"></a>masterSendNMTnodeguard</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, nmtmaster.o(.text.masterSendNMTnodeguard))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = masterSendNMTnodeguard &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
</UL>

<P><STRONG><a name="[21e]"></a>masterSendNMTstateChange</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nmtmaster.o(.text.masterSendNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = masterSendNMTstateChange &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preOperational
</UL>

<P><STRONG><a name="[20c]"></a>nodeguardInit</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lifegrd.o(.text.nodeguardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nodeguardInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[20b]"></a>nodeguardStop</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lifegrd.o(.text.nodeguardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nodeguardStop &rArr; DelAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[237]"></a>objdictToSDOline</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, sdo.o(.text.objdictToSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = objdictToSDOline &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[22a]"></a>proceedEMCY</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, emcy.o(.text.proceedEMCY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[22e]"></a>proceedNMTstateChange</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, nmtslave.o(.text.proceedNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[22d]"></a>proceedNODE_GUARD</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, lifegrd.o(.text.proceedNODE_GUARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = proceedNODE_GUARD &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[22b]"></a>proceedPDO</STRONG> (Thumb, 1102 bytes, Stack size 112 bytes, pdo.o(.text.proceedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = proceedPDO &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[22c]"></a>proceedSDO</STRONG> (Thumb, 11302 bytes, Stack size 192 bytes, sdo.o(.text.proceedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSDOlineRestBytes
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineRestBytes
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[229]"></a>proceedSYNC</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sync.o(.text.proceedSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[261]"></a>pvPortMalloc</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[24f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[177]"></a>readNetworkDict</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sdo.o(.text.readNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = readNetworkDict &rArr; _readNetworkDict &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[264]"></a>resetSDO</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdo.o(.text.resetSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = resetSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[214]"></a>resetSDOline</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sdo.o(.text.resetSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[20d]"></a>sendOnePDOevent</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, pdo.o(.text.sendOnePDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInhibitTimerAlarm
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>

<P><STRONG><a name="[224]"></a>sendSDO</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, sdo.o(.text.sendSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readNetworkDict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
</UL>

<P><STRONG><a name="[213]"></a>sendSDOabort</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sdo.o(.text.sendSDOabort))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[219]"></a>sendSYNC</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sync.o(.text.sendSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncAlarm
</UL>

<P><STRONG><a name="[266]"></a>sendSYNCMessage</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sync.o(.text.sendSYNCMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sendSYNCMessage &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[239]"></a>setNodeId</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, states.o(.text.setNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[23b]"></a>setSDOlineRestBytes</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdo.o(.text.setSDOlineRestBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setSDOlineRestBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[1b3]"></a>setState</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, states.o(.text.setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[218]"></a>setTimer</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, flexcan_interrupt_transfer.o(.text.setTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[268]"></a>slaveSendBootUp</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, nmtslave.o(.text.slaveSendBootUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = slaveSendBootUp &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[209]"></a>startSYNC</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sync.o(.text.startSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = startSYNC &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCOB_ID_SyncUpdate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[269]"></a>stopSYNC</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sync.o(.text.stopSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stopSYNC &rArr; RegisterSetODentryCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[267]"></a>switchCommunicationState</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, states.o(.text.switchCommunicationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[23f]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[244]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[24e]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[240]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[26c]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[171]"></a>vPortEnterCritical</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[175]"></a>vPortExitCritical</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[24a]"></a>vPortFree</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[271]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[246]"></a>vQueueAddToRegistry</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[25a]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[174]"></a>vTaskDelete</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[275]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[260]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[26e]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[26b]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[236]"></a>vTaskStartScheduler</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[258]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[15d]"></a>vTaskSwitchContext</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[17b]"></a>writeNetworkDict</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, sdo.o(.text.writeNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = writeNetworkDict &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Task
</UL>

<P><STRONG><a name="[270]"></a>xPortStartScheduler</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[245]"></a>xQueueGenericCreate</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[24c]"></a>xQueueGenericReset</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[255]"></a>xQueueReceive</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[276]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[172]"></a>xTaskCreate</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[274]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[25b]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[21a]"></a>xTaskIncrementTick</STRONG> (Thumb, 570 bytes, Stack size 48 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[25f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[259]"></a>xTaskResumeAll</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[26f]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[285]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[286]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[287]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1f7]"></a>GPT_ClearStatusFlags</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flexcan_interrupt_transfer.o(.text.GPT_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT2_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>BSP_Init</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, flexcan_interrupt_transfer.o(.text.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = BSP_Init &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CalculateImprovedTimingValues
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetDefaultConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_GetDefaultConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetRootClock
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_StartTimer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_EnableInterrupts
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetOutputCompareValue
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_SetClockDivider
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>AppTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, flexcan_interrupt_transfer.o(.text.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AppTaskCreate &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexcan_interrupt_transfer.o(.text.main)
</UL>
<P><STRONG><a name="[1a3]"></a>GPT_SetClockDivider</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, flexcan_interrupt_transfer.o(.text.GPT_SetClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GPT_SetClockDivider &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1a5]"></a>GPT_SetOutputCompareValue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flexcan_interrupt_transfer.o(.text.GPT_SetOutputCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GPT_SetOutputCompareValue &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1a6]"></a>GPT_EnableInterrupts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flexcan_interrupt_transfer.o(.text.GPT_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1a7]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flexcan_interrupt_transfer.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1a8]"></a>GPT_StartTimer</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, flexcan_interrupt_transfer.o(.text.GPT_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPT_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1a9]"></a>CLOCK_SetRootClock</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, flexcan_interrupt_transfer.o(.text.CLOCK_SetRootClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_SetRootClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1ac]"></a>CLOCK_GetRootClockFreq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, flexcan_interrupt_transfer.o(.text.CLOCK_GetRootClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CLOCK_GetRootClockFreq &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockDiv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockMux
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[148]"></a>flexcan_callback</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, flexcan_interrupt_transfer.o(.text.flexcan_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flexcan_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexcan_interrupt_transfer.o(.text.BSP_Init)
</UL>
<P><STRONG><a name="[147]"></a>App_Task</STRONG> (Thumb, 2138 bytes, Stack size 96 bytes, flexcan_interrupt_transfer.o(.text.App_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = App_Task &rArr; canDispatch &rArr; proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReadResultNetworkDict
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetworkDict
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexcan_interrupt_transfer.o(.text.AppTaskCreate)
</UL>
<P><STRONG><a name="[1d7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, flexcan_interrupt_transfer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[1c6]"></a>CLOCK_GetRootClockMux</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, flexcan_interrupt_transfer.o(.text.CLOCK_GetRootClockMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockMux
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[1c7]"></a>CLOCK_GetRootClockDiv</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, flexcan_interrupt_transfer.o(.text.CLOCK_GetRootClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[19d]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[19e]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin_mux.o(.text.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[19f]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pin_mux.o(.text.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[1ba]"></a>CLOCK_ControlGate</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, pin_mux.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[199]"></a>CLOCK_GetRootClockFreq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, board.o(.text.CLOCK_GetRootClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CLOCK_GetRootClockFreq &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockDiv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockMux
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[1c8]"></a>CLOCK_GetRootClockMux</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetRootClockMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockMux
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[1c9]"></a>CLOCK_GetRootClockDiv</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, board.o(.text.CLOCK_GetRootClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[195]"></a>ARM_MPU_Disable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, board.o(.text.ARM_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[197]"></a>ARM_MPU_Enable</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, board.o(.text.ARM_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ARM_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[17f]"></a>DCDC_SetVDD1P0BuckModeTargetVoltage</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, clock_config.o(.text.DCDC_SetVDD1P0BuckModeTargetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCDC_SetVDD1P0BuckModeTargetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[185]"></a>CLOCK_OSC_GateOscRc400M</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_OSC_GateOscRc400M))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_OSC_GateOscRc400M
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[186]"></a>CLOCK_OSC_EnableOsc48M</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_OSC_EnableOsc48M))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_OSC_EnableOsc48M
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[187]"></a>CLOCK_OSC_EnableOsc48MDiv2</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_OSC_EnableOsc48MDiv2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_OSC_EnableOsc48MDiv2
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[188]"></a>CLOCK_SetRootClock</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, clock_config.o(.text.CLOCK_SetRootClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_SetRootClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[191]"></a>IOMUXC_SetSaiMClkClockSource</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_SetSaiMClkClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetSaiMClkClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[192]"></a>IOMUXC_MQSConfig</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, clock_config.o(.text.IOMUXC_MQSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_MQSConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[193]"></a>CLOCK_GetRootClockFreq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, clock_config.o(.text.CLOCK_GetRootClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CLOCK_GetRootClockFreq &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPllFreq &rArr; CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockDiv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockMux
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[1ca]"></a>CLOCK_GetRootClockMux</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_GetRootClockMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockMux
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[1cb]"></a>CLOCK_GetRootClockDiv</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, clock_config.o(.text.CLOCK_GetRootClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[1d3]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 976 bytes, Stack size 128 bytes, fsl_debug_console.o(.text.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>

<P><STRONG><a name="[1d4]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, fsl_debug_console.o(.text.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[1d5]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fsl_debug_console.o(.text.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[1de]"></a>FLEXCAN_ClearStatusFlags</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ExitFreezeMode
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Reset
</UL>

<P><STRONG><a name="[1da]"></a>FLEXCAN_GetSegments</STRONG> (Thumb, 318 bytes, Stack size 36 bytes, fsl_flexcan.o(.text.FLEXCAN_GetSegments))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FLEXCAN_GetSegments
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CalculateImprovedTimingValues
</UL>

<P><STRONG><a name="[1bb]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[1e0]"></a>FLEXCAN_Enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.FLEXCAN_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCAN_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[1e1]"></a>FLEXCAN_Reset</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, fsl_flexcan.o(.text.FLEXCAN_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FLEXCAN_Reset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flexcan_memset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearStatusFlags
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[1bc]"></a>CLOCK_ControlGate</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fsl_flexcan.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1e8]"></a>flexcan_memset</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, fsl_flexcan.o(.text.flexcan_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flexcan_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Reset
</UL>

<P><STRONG><a name="[1e4]"></a>FLEXCAN_IsMbOccupied</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_flexcan.o(.text.FLEXCAN_IsMbOccupied))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCAN_IsMbOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortSend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadFDRxMb
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WriteTxMb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetFDTxMbConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetTxMbConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetRxMbConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
</UL>

<P><STRONG><a name="[1e5]"></a>FLEXCAN_GetFDMailboxOffset</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_GetFDMailboxOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_GetFDMailboxOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadFDRxMb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetFDTxMbConfig
</UL>

<P><STRONG><a name="[1ec]"></a>FLEXCAN_ClearMbStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_ClearMbStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_ClearMbStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
</UL>

<P><STRONG><a name="[1f4]"></a>FLEXCAN_EnableInterrupts</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
</UL>

<P><STRONG><a name="[1f5]"></a>FLEXCAN_DisableInterrupts</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
</UL>

<P><STRONG><a name="[1d8]"></a>EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferCreateHandle
</UL>

<P><STRONG><a name="[1dc]"></a>FLEXCAN_GetStatusFlags</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CheckUnhandleInterruptEvents
</UL>

<P><STRONG><a name="[1eb]"></a>FLEXCAN_SubHandlerForDataTransfered</STRONG> (Thumb, 914 bytes, Stack size 64 bytes, fsl_flexcan.o(.text.FLEXCAN_SubHandlerForDataTransfered))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = FLEXCAN_SubHandlerForDataTransfered &rArr; FLEXCAN_TransferFDAbortSend &rArr; FLEXCAN_SetFDTxMbConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortSend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxFifo
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadFDRxMb
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxMb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnableMbInterrupts
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearMbStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1db]"></a>FLEXCAN_CheckUnhandleInterruptEvents</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, fsl_flexcan.o(.text.FLEXCAN_CheckUnhandleInterruptEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLEXCAN_CheckUnhandleInterruptEvents &rArr; FLEXCAN_GetStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferHandleIRQ
</UL>

<P><STRONG><a name="[1d9]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, fsl_flexcan.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[1ed]"></a>FLEXCAN_EnableMbInterrupts</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_EnableMbInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_EnableMbInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SubHandlerForDataTransfered
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferReceiveNonBlocking
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferSendNonBlocking
</UL>

<P><STRONG><a name="[1f3]"></a>FLEXCAN_DisableMbInterrupts</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_flexcan.o(.text.FLEXCAN_DisableMbInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_DisableMbInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceiveFifo
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortReceive
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferFDAbortSend
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TransferAbortSend
</UL>

<P><STRONG><a name="[168]"></a>ANATOP_PllBypass</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_clock.o(.text.ANATOP_PllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANATOP_PllBypass &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
</UL>

<P><STRONG><a name="[1b4]"></a>ANATOP_AudioPllSwEnClk</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_AudioPllSwEnClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_AudioPllSwEnClk
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
</UL>

<P><STRONG><a name="[1b5]"></a>ANATOP_AudioPllGate</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_AudioPllGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_AudioPllGate
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
</UL>

<P><STRONG><a name="[16d]"></a>ANATOP_PllEnableClk</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_clock.o(.text.ANATOP_PllEnableClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANATOP_PllEnableClk &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[16a]"></a>ANATOP_PllSetPower</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_clock.o(.text.ANATOP_PllSetPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANATOP_PllSetPower &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllConfigure
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[16b]"></a>ANATOP_PllEnablePllReg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_clock.o(.text.ANATOP_PllEnablePllReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANATOP_PllEnablePllReg &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllConfigure
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[169]"></a>ANATOP_PllConfigure</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, fsl_clock.o(.text.ANATOP_PllConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ANATOP_PllConfigure &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_WriteWithMaskShift
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllEnablePllReg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllSetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
</UL>

<P><STRONG><a name="[170]"></a>ANATOP_PllToggleHoldRingOff</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_clock.o(.text.ANATOP_PllToggleHoldRingOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ANATOP_PllToggleHoldRingOff &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllHoldRingOff
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
</UL>

<P><STRONG><a name="[16f]"></a>ANATOP_PllHoldRingOff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_clock.o(.text.ANATOP_PllHoldRingOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANATOP_PllHoldRingOff &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_PllToggleHoldRingOff
</UL>

<P><STRONG><a name="[16e]"></a>ANATOP_PllEnableSs</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_clock.o(.text.ANATOP_PllEnableSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANATOP_PllEnableSs &rArr; ANATOP_AI_Write &rArr; ANATOP_AI_Access
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[1cf]"></a>ANATOP_VideoPllSwEnClk</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_VideoPllSwEnClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_VideoPllSwEnClk
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
</UL>

<P><STRONG><a name="[1d0]"></a>ANATOP_VideoPllGate</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_VideoPllGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_VideoPllGate
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitVideoPll
</UL>

<P><STRONG><a name="[1b6]"></a>ANATOP_SysPll1SwEnClk</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_SysPll1SwEnClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_SysPll1SwEnClk
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[1b9]"></a>ANATOP_SysPll1Gate</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_SysPll1Gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_SysPll1Gate
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[1b7]"></a>ANATOP_SysPll1Div2En</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_SysPll1Div2En))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_SysPll1Div2En
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[1b8]"></a>ANATOP_SysPll1Div5En</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fsl_clock.o(.text.ANATOP_SysPll1Div5En))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ANATOP_SysPll1Div5En
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitSysPll1
</UL>

<P><STRONG><a name="[1c1]"></a>CLOCK_GetAvPllFreq</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, fsl_clock.o(.text.CLOCK_GetAvPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CLOCK_GetAvPllFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANATOP_AI_Read
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[1c4]"></a>CLOCK_GetM7Freq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetM7Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CLOCK_GetM7Freq &rArr; CLOCK_GetRootClockFreq &rArr;  CLOCK_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[1c5]"></a>CLOCK_GetRootClockFreq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetRootClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = CLOCK_GetRootClockFreq &rArr;  CLOCK_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockDiv
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockMux
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetM7Freq
</UL>

<P><STRONG><a name="[1cc]"></a>CLOCK_GetRootClockMux</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetRootClockMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockMux
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[1cd]"></a>CLOCK_GetRootClockDiv</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetRootClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetRootClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRootClockFreq
</UL>

<P><STRONG><a name="[212]"></a>DelayLoop</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_common_arm.o(.text.DelayLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[1bd]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[208]"></a>LPUART_SoftwareReset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fsl_lpuart.o(.text.LPUART_SoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LPUART_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[1be]"></a>CLOCK_ControlGate</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fsl_lpuart.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1f9]"></a>GPT_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_gpt.o(.text.GPT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GPT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[1bf]"></a>CLOCK_EnableClock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_gpt.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[1fa]"></a>GPT_SoftwareReset</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, fsl_gpt.o(.text.GPT_SoftwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPT_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[1fb]"></a>GPT_SetClockSource</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fsl_gpt.o(.text.GPT_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[1fc]"></a>GPT_SetClockDivider</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fsl_gpt.o(.text.GPT_SetClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GPT_SetClockDivider &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_Init
</UL>

<P><STRONG><a name="[1c0]"></a>CLOCK_ControlGate</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fsl_gpt.o(.text.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_UartInitCommon</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, fsl_adapter_lpuart.o(.text.HAL_UartInitCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HAL_UartInitCommon &rArr; LPUART_Init &rArr; LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[202]"></a>HAL_UartGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_adapter_lpuart.o(.text.HAL_UartGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInitCommon
</UL>

<P><STRONG><a name="[226]"></a>sendPdo</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pdo.o(.text.sendPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sendPdo &rArr; canSend &rArr; FLEXCAN_TransferSendNonBlocking &rArr; FLEXCAN_WriteTxMb &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[24b]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[25e]"></a>prvUnlockQueue</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[251]"></a>prvIsQueueEmpty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[249]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[24d]"></a>prvInitialiseNewTask</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[241]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[242]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[26d]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[248]"></a>prvDeleteTCB</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[23e]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[15b]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[247]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[243]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[15c]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[25d]"></a>prvGetNextExpireTime</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[257]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[254]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[256]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[252]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[250]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[253]"></a>prvReloadTimer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timers.o(.text.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[25c]"></a>prvSwitchTimerLists</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[156]"></a>prvTaskExitError</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[272]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[273]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[262]"></a>prvHeapInit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[263]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
